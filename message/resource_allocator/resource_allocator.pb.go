// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: resource_allocator.proto

//option go_package = ".;resource_allocator";

package resource_allocator

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//资源请求参数
type ResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerId     string                         `protobuf:"bytes,1,opt,name=schedulerId,proto3" json:"schedulerId,omitempty"`         //调度器id
	TimeStamp       int64                          `protobuf:"varint,2,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`            //时间戳
	CurrentRequest  *ResourceRequestResourceDemand `protobuf:"bytes,3,opt,name=currentRequest,proto3" json:"currentRequest,omitempty"`   //该调度器当前批次ready_tasks资源请求量
	NextRequest     *ResourceRequestResourceDemand `protobuf:"bytes,4,opt,name=nextRequest,proto3" json:"nextRequest,omitempty"`         //该调度器下一批次ready_tasks资源请求量
	AllTasksRequest *ResourceRequestResourceDemand `protobuf:"bytes,5,opt,name=allTasksRequest,proto3" json:"allTasksRequest,omitempty"` //当前该调度器所有待分配任务资源请求总量
	//time_grade暂时用不到。若customization=true且cost_grade=false，则请求的资源都满足；否则，按之前流程走
	Customization bool `protobuf:"varint,6,opt,name=customization,proto3" json:"customization,omitempty"`          //该任务是否属于定制工作流
	TimeGrade     bool `protobuf:"varint,7,opt,name=time_grade,json=timeGrade,proto3" json:"time_grade,omitempty"` // 是否存在时间等级
	CostGrade     bool `protobuf:"varint,8,opt,name=cost_grade,json=costGrade,proto3" json:"cost_grade,omitempty"` // 是否花费（资金）等级
}

func (x *ResourceRequest) Reset() {
	*x = ResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequest) ProtoMessage() {}

func (x *ResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequest.ProtoReflect.Descriptor instead.
func (*ResourceRequest) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceRequest) GetSchedulerId() string {
	if x != nil {
		return x.SchedulerId
	}
	return ""
}

func (x *ResourceRequest) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *ResourceRequest) GetCurrentRequest() *ResourceRequestResourceDemand {
	if x != nil {
		return x.CurrentRequest
	}
	return nil
}

func (x *ResourceRequest) GetNextRequest() *ResourceRequestResourceDemand {
	if x != nil {
		return x.NextRequest
	}
	return nil
}

func (x *ResourceRequest) GetAllTasksRequest() *ResourceRequestResourceDemand {
	if x != nil {
		return x.AllTasksRequest
	}
	return nil
}

func (x *ResourceRequest) GetCustomization() bool {
	if x != nil {
		return x.Customization
	}
	return false
}

func (x *ResourceRequest) GetTimeGrade() bool {
	if x != nil {
		return x.TimeGrade
	}
	return false
}

func (x *ResourceRequest) GetCostGrade() bool {
	if x != nil {
		return x.CostGrade
	}
	return false
}

//分配资源信息
type ResourceAllocateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerId          string                              `protobuf:"bytes,1,opt,name=schedulerId,proto3" json:"schedulerId,omitempty"`
	CurrentRequest       *ResourceAllocateInfoResourceDemand `protobuf:"bytes,2,opt,name=currentRequest,proto3" json:"currentRequest,omitempty"`
	CurrentRequestStatus bool                                `protobuf:"varint,3,opt,name=currentRequestStatus,proto3" json:"currentRequestStatus,omitempty"`
}

func (x *ResourceAllocateInfo) Reset() {
	*x = ResourceAllocateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceAllocateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAllocateInfo) ProtoMessage() {}

func (x *ResourceAllocateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAllocateInfo.ProtoReflect.Descriptor instead.
func (*ResourceAllocateInfo) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceAllocateInfo) GetSchedulerId() string {
	if x != nil {
		return x.SchedulerId
	}
	return ""
}

func (x *ResourceAllocateInfo) GetCurrentRequest() *ResourceAllocateInfoResourceDemand {
	if x != nil {
		return x.CurrentRequest
	}
	return nil
}

func (x *ResourceAllocateInfo) GetCurrentRequestStatus() bool {
	if x != nil {
		return x.CurrentRequestStatus
	}
	return false
}

// 请求创建调度器POD
type CreateSchedulerPodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//镜像
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	//基本单位 millicore(1Core=1000millicore)
	Cpu int64 `protobuf:"varint,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	//基本单位 MiB
	Mem int64 `protobuf:"varint,3,opt,name=mem,proto3" json:"mem,omitempty"`
	//需要输入给 POD 的环境变量
	Env []string `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty"`
}

func (x *CreateSchedulerPodRequest) Reset() {
	*x = CreateSchedulerPodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchedulerPodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchedulerPodRequest) ProtoMessage() {}

func (x *CreateSchedulerPodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchedulerPodRequest.ProtoReflect.Descriptor instead.
func (*CreateSchedulerPodRequest) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSchedulerPodRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CreateSchedulerPodRequest) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *CreateSchedulerPodRequest) GetMem() int64 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *CreateSchedulerPodRequest) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

type CreateSchedulerPodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//成功创建,根据当前剩余资源返回创建调度起pod的上限数 成功>=1，失败置为0）
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	//在失败状态下，可以设置状态码
	//成功状态（result>=1），客户端不关系此字段，置为 0 即可
	ErrNo int32 `protobuf:"varint,2,opt,name=err_no,json=errNo,proto3" json:"err_no,omitempty"`
}

func (x *CreateSchedulerPodResponse) Reset() {
	*x = CreateSchedulerPodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchedulerPodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchedulerPodResponse) ProtoMessage() {}

func (x *CreateSchedulerPodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchedulerPodResponse.ProtoReflect.Descriptor instead.
func (*CreateSchedulerPodResponse) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSchedulerPodResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *CreateSchedulerPodResponse) GetErrNo() int32 {
	if x != nil {
		return x.ErrNo
	}
	return 0
}

//请求创建任务POD
type CreateTaskPodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//workflow的ID
	WorkflowId string `protobuf:"bytes,1,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	//taskName
	TaskName string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
	//任务镜像
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	//基本单位 millicore(1Core=1000millicore)
	Cpu int64 `protobuf:"varint,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
	//基本单位 MiB
	Mem int64 `protobuf:"varint,5,opt,name=mem,proto3" json:"mem,omitempty"`
	//需要输入给 POD 的环境变量
	Env map[string]string `protobuf:"bytes,6,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 输入向量
	InputVector []string `protobuf:"bytes,7,rep,name=input_vector,json=inputVector,proto3" json:"input_vector,omitempty"`
	// 输出向量
	OutputVector []string `protobuf:"bytes,8,rep,name=output_vector,json=outputVector,proto3" json:"output_vector,omitempty"`
	//time_grade暂时用不到。若customization=true且cost_grade=false，
	//则pod配置资源最大化，即request=limit；若customization=true且cost_grade=true，
	//则pod配置资源最小化；否则，按之前流程走
	Customization bool `protobuf:"varint,9,opt,name=customization,proto3" json:"customization,omitempty"`           //该任务是否属于定制工作流
	TimeGrade     bool `protobuf:"varint,10,opt,name=time_grade,json=timeGrade,proto3" json:"time_grade,omitempty"` // 是否存在时间等级
	CostGrade     bool `protobuf:"varint,11,opt,name=cost_grade,json=costGrade,proto3" json:"cost_grade,omitempty"` // 是否花费（资金）等级
}

func (x *CreateTaskPodRequest) Reset() {
	*x = CreateTaskPodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskPodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskPodRequest) ProtoMessage() {}

func (x *CreateTaskPodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskPodRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskPodRequest) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTaskPodRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *CreateTaskPodRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CreateTaskPodRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CreateTaskPodRequest) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *CreateTaskPodRequest) GetMem() int64 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *CreateTaskPodRequest) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *CreateTaskPodRequest) GetInputVector() []string {
	if x != nil {
		return x.InputVector
	}
	return nil
}

func (x *CreateTaskPodRequest) GetOutputVector() []string {
	if x != nil {
		return x.OutputVector
	}
	return nil
}

func (x *CreateTaskPodRequest) GetCustomization() bool {
	if x != nil {
		return x.Customization
	}
	return false
}

func (x *CreateTaskPodRequest) GetTimeGrade() bool {
	if x != nil {
		return x.TimeGrade
	}
	return false
}

func (x *CreateTaskPodRequest) GetCostGrade() bool {
	if x != nil {
		return x.CostGrade
	}
	return false
}

type CreateTaskPodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//成功创建 pod 的状态码（成功>=1，失败置为0）
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	//pod共享存储路径
	VolumePath string `protobuf:"bytes,2,opt,name=volumePath,proto3" json:"volumePath,omitempty"`
	//在失败状态下，可以设置状态码
	//成功状态（result>=1），客户端不关系此字段，置为 0 即可
	ErrNo int32 `protobuf:"varint,3,opt,name=err_no,json=errNo,proto3" json:"err_no,omitempty"`
}

func (x *CreateTaskPodResponse) Reset() {
	*x = CreateTaskPodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskPodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskPodResponse) ProtoMessage() {}

func (x *CreateTaskPodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskPodResponse.ProtoReflect.Descriptor instead.
func (*CreateTaskPodResponse) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTaskPodResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *CreateTaskPodResponse) GetVolumePath() string {
	if x != nil {
		return x.VolumePath
	}
	return ""
}

func (x *CreateTaskPodResponse) GetErrNo() int32 {
	if x != nil {
		return x.ErrNo
	}
	return 0
}

//调度器控制器推送调度器保活信号
type UpdateSchedulerAliveStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//调度器Id
	SchedulerId string `protobuf:"bytes,1,opt,name=schedulerId,proto3" json:"schedulerId,omitempty"`
	//保活状态
	AliveStatus bool `protobuf:"varint,2,opt,name=AliveStatus,proto3" json:"AliveStatus,omitempty"`
}

func (x *UpdateSchedulerAliveStatusRequest) Reset() {
	*x = UpdateSchedulerAliveStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSchedulerAliveStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchedulerAliveStatusRequest) ProtoMessage() {}

func (x *UpdateSchedulerAliveStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchedulerAliveStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateSchedulerAliveStatusRequest) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateSchedulerAliveStatusRequest) GetSchedulerId() string {
	if x != nil {
		return x.SchedulerId
	}
	return ""
}

func (x *UpdateSchedulerAliveStatusRequest) GetAliveStatus() bool {
	if x != nil {
		return x.AliveStatus
	}
	return false
}

type UpdateSchedulerAliveStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//成功更新调度器保活状态的状态码（成功>=1，失败置为0）
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	//在失败状态下，可以设置状态码
	//客户端不关系此字段，置为 0 即可
	ErrNo int32 `protobuf:"varint,2,opt,name=err_no,json=errNo,proto3" json:"err_no,omitempty"`
}

func (x *UpdateSchedulerAliveStatusResponse) Reset() {
	*x = UpdateSchedulerAliveStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSchedulerAliveStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchedulerAliveStatusResponse) ProtoMessage() {}

func (x *UpdateSchedulerAliveStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchedulerAliveStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateSchedulerAliveStatusResponse) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateSchedulerAliveStatusResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *UpdateSchedulerAliveStatusResponse) GetErrNo() int32 {
	if x != nil {
		return x.ErrNo
	}
	return 0
}

//调度器发送给资源分配器执行完的工作流
type DeleteWorkflowNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//workflow的ID
	WorkflowId string `protobuf:"bytes,1,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
}

func (x *DeleteWorkflowNamespaceRequest) Reset() {
	*x = DeleteWorkflowNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowNamespaceRequest) ProtoMessage() {}

func (x *DeleteWorkflowNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowNamespaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteWorkflowNamespaceRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

type DeleteWorkflowNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//资源分配器删除该工作流的namespace的状态码（成功>=1，失败置为0）
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DeleteWorkflowNamespaceResponse) Reset() {
	*x = DeleteWorkflowNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowNamespaceResponse) ProtoMessage() {}

func (x *DeleteWorkflowNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowNamespaceResponse.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteWorkflowNamespaceResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

//调度器控制器获取可分配的调度器数量请求
type GetSchedulerNumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//调度器的资源request
	Cpu int64 `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Mem int64 `protobuf:"varint,2,opt,name=mem,proto3" json:"mem,omitempty"`
}

func (x *GetSchedulerNumRequest) Reset() {
	*x = GetSchedulerNumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerNumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerNumRequest) ProtoMessage() {}

func (x *GetSchedulerNumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerNumRequest.ProtoReflect.Descriptor instead.
func (*GetSchedulerNumRequest) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{10}
}

func (x *GetSchedulerNumRequest) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *GetSchedulerNumRequest) GetMem() int64 {
	if x != nil {
		return x.Mem
	}
	return 0
}

//响应调度器控制器请求
type GetSchedulerNumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerPodNum int64 `protobuf:"varint,1,opt,name=schedulerPodNum,proto3" json:"schedulerPodNum,omitempty"`
}

func (x *GetSchedulerNumResponse) Reset() {
	*x = GetSchedulerNumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerNumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerNumResponse) ProtoMessage() {}

func (x *GetSchedulerNumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerNumResponse.ProtoReflect.Descriptor instead.
func (*GetSchedulerNumResponse) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{11}
}

func (x *GetSchedulerNumResponse) GetSchedulerPodNum() int64 {
	if x != nil {
		return x.SchedulerPodNum
	}
	return 0
}

type ResourceRequestResourceDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu int64 `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"` //基本单位millicore(1Core=1000millicore) [default = 50]
	Mem int64 `protobuf:"varint,2,opt,name=mem,proto3" json:"mem,omitempty"` //基本单位Mi,1024*1024byte[default = 50]
}

func (x *ResourceRequestResourceDemand) Reset() {
	*x = ResourceRequestResourceDemand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequestResourceDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequestResourceDemand) ProtoMessage() {}

func (x *ResourceRequestResourceDemand) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequestResourceDemand.ProtoReflect.Descriptor instead.
func (*ResourceRequestResourceDemand) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ResourceRequestResourceDemand) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ResourceRequestResourceDemand) GetMem() int64 {
	if x != nil {
		return x.Mem
	}
	return 0
}

type ResourceAllocateInfoResourceDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu int64 `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"` //基本单位millicore(1Core=1000millicore) [default = 50]
	Mem int64 `protobuf:"varint,2,opt,name=mem,proto3" json:"mem,omitempty"` //基本单位Mi,1024*1024byte[default = 100]
}

func (x *ResourceAllocateInfoResourceDemand) Reset() {
	*x = ResourceAllocateInfoResourceDemand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_allocator_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceAllocateInfoResourceDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAllocateInfoResourceDemand) ProtoMessage() {}

func (x *ResourceAllocateInfoResourceDemand) ProtoReflect() protoreflect.Message {
	mi := &file_resource_allocator_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAllocateInfoResourceDemand.ProtoReflect.Descriptor instead.
func (*ResourceAllocateInfoResourceDemand) Descriptor() ([]byte, []int) {
	return file_resource_allocator_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ResourceAllocateInfoResourceDemand) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ResourceAllocateInfoResourceDemand) GetMem() int64 {
	if x != nil {
		return x.Mem
	}
	return 0
}

var File_resource_allocator_proto protoreflect.FileDescriptor

var file_resource_allocator_proto_rawDesc = []byte{
	0x0a, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xfb,
	0x03, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x5a, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x1a, 0x34, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x22, 0x83, 0x02, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x34, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d,
	0x65, 0x6d, 0x22, 0x67, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x22, 0x4b, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x4e, 0x6f, 0x22, 0xb5, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x43, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x66, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x4e, 0x6f, 0x22, 0x67, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x53, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x4e, 0x6f, 0x22, 0x40, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x3c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x65,
	0x6d, 0x22, 0x43, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x50, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x32, 0xe7, 0x05, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x68, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x73, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x64, 0x12, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x64, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f,
	0x64, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x32, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resource_allocator_proto_rawDescOnce sync.Once
	file_resource_allocator_proto_rawDescData = file_resource_allocator_proto_rawDesc
)

func file_resource_allocator_proto_rawDescGZIP() []byte {
	file_resource_allocator_proto_rawDescOnce.Do(func() {
		file_resource_allocator_proto_rawDescData = protoimpl.X.CompressGZIP(file_resource_allocator_proto_rawDescData)
	})
	return file_resource_allocator_proto_rawDescData
}

var file_resource_allocator_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_resource_allocator_proto_goTypes = []interface{}{
	(*ResourceRequest)(nil),                    // 0: resource_allocator.ResourceRequest
	(*ResourceAllocateInfo)(nil),               // 1: resource_allocator.ResourceAllocateInfo
	(*CreateSchedulerPodRequest)(nil),          // 2: resource_allocator.CreateSchedulerPodRequest
	(*CreateSchedulerPodResponse)(nil),         // 3: resource_allocator.CreateSchedulerPodResponse
	(*CreateTaskPodRequest)(nil),               // 4: resource_allocator.CreateTaskPodRequest
	(*CreateTaskPodResponse)(nil),              // 5: resource_allocator.CreateTaskPodResponse
	(*UpdateSchedulerAliveStatusRequest)(nil),  // 6: resource_allocator.UpdateSchedulerAliveStatusRequest
	(*UpdateSchedulerAliveStatusResponse)(nil), // 7: resource_allocator.UpdateSchedulerAliveStatusResponse
	(*DeleteWorkflowNamespaceRequest)(nil),     // 8: resource_allocator.DeleteWorkflowNamespaceRequest
	(*DeleteWorkflowNamespaceResponse)(nil),    // 9: resource_allocator.DeleteWorkflowNamespaceResponse
	(*GetSchedulerNumRequest)(nil),             // 10: resource_allocator.GetSchedulerNumRequest
	(*GetSchedulerNumResponse)(nil),            // 11: resource_allocator.GetSchedulerNumResponse
	(*ResourceRequestResourceDemand)(nil),      // 12: resource_allocator.ResourceRequest.resourceDemand
	(*ResourceAllocateInfoResourceDemand)(nil), // 13: resource_allocator.ResourceAllocateInfo.resourceDemand
	nil, // 14: resource_allocator.CreateTaskPodRequest.EnvEntry
}
var file_resource_allocator_proto_depIdxs = []int32{
	12, // 0: resource_allocator.ResourceRequest.currentRequest:type_name -> resource_allocator.ResourceRequest.resourceDemand
	12, // 1: resource_allocator.ResourceRequest.nextRequest:type_name -> resource_allocator.ResourceRequest.resourceDemand
	12, // 2: resource_allocator.ResourceRequest.allTasksRequest:type_name -> resource_allocator.ResourceRequest.resourceDemand
	13, // 3: resource_allocator.ResourceAllocateInfo.currentRequest:type_name -> resource_allocator.ResourceAllocateInfo.resourceDemand
	14, // 4: resource_allocator.CreateTaskPodRequest.env:type_name -> resource_allocator.CreateTaskPodRequest.EnvEntry
	0,  // 5: resource_allocator.ResourceRequestService.GetResourceAllocateInfo:input_type -> resource_allocator.ResourceRequest
	2,  // 6: resource_allocator.ResourceRequestService.CreateSchedulerPod:input_type -> resource_allocator.CreateSchedulerPodRequest
	4,  // 7: resource_allocator.ResourceRequestService.CreateTaskPod:input_type -> resource_allocator.CreateTaskPodRequest
	8,  // 8: resource_allocator.ResourceRequestService.DeleteWorkflowNamespace:input_type -> resource_allocator.DeleteWorkflowNamespaceRequest
	6,  // 9: resource_allocator.ResourceRequestService.UpdateSchedulerAliveStatus:input_type -> resource_allocator.UpdateSchedulerAliveStatusRequest
	10, // 10: resource_allocator.ResourceRequestService.GetAllocatableSchedulerNum:input_type -> resource_allocator.GetSchedulerNumRequest
	1,  // 11: resource_allocator.ResourceRequestService.GetResourceAllocateInfo:output_type -> resource_allocator.ResourceAllocateInfo
	3,  // 12: resource_allocator.ResourceRequestService.CreateSchedulerPod:output_type -> resource_allocator.CreateSchedulerPodResponse
	5,  // 13: resource_allocator.ResourceRequestService.CreateTaskPod:output_type -> resource_allocator.CreateTaskPodResponse
	9,  // 14: resource_allocator.ResourceRequestService.DeleteWorkflowNamespace:output_type -> resource_allocator.DeleteWorkflowNamespaceResponse
	7,  // 15: resource_allocator.ResourceRequestService.UpdateSchedulerAliveStatus:output_type -> resource_allocator.UpdateSchedulerAliveStatusResponse
	11, // 16: resource_allocator.ResourceRequestService.GetAllocatableSchedulerNum:output_type -> resource_allocator.GetSchedulerNumResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_resource_allocator_proto_init() }
func file_resource_allocator_proto_init() {
	if File_resource_allocator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_resource_allocator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_allocator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceAllocateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_allocator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSchedulerPodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_allocator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSchedulerPodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_allocator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskPodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_allocator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskPodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_allocator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSchedulerAliveStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_allocator_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSchedulerAliveStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_allocator_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_allocator_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_allocator_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerNumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_allocator_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerNumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_allocator_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequestResourceDemand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_allocator_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceAllocateInfoResourceDemand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resource_allocator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_resource_allocator_proto_goTypes,
		DependencyIndexes: file_resource_allocator_proto_depIdxs,
		MessageInfos:      file_resource_allocator_proto_msgTypes,
	}.Build()
	File_resource_allocator_proto = out.File
	file_resource_allocator_proto_rawDesc = nil
	file_resource_allocator_proto_goTypes = nil
	file_resource_allocator_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ResourceRequestServiceClient is the client API for ResourceRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceRequestServiceClient interface {
	GetResourceAllocateInfo(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceAllocateInfo, error)
	CreateSchedulerPod(ctx context.Context, in *CreateSchedulerPodRequest, opts ...grpc.CallOption) (*CreateSchedulerPodResponse, error)
	CreateTaskPod(ctx context.Context, in *CreateTaskPodRequest, opts ...grpc.CallOption) (*CreateTaskPodResponse, error)
	DeleteWorkflowNamespace(ctx context.Context, in *DeleteWorkflowNamespaceRequest, opts ...grpc.CallOption) (*DeleteWorkflowNamespaceResponse, error)
	UpdateSchedulerAliveStatus(ctx context.Context, in *UpdateSchedulerAliveStatusRequest, opts ...grpc.CallOption) (*UpdateSchedulerAliveStatusResponse, error)
	GetAllocatableSchedulerNum(ctx context.Context, in *GetSchedulerNumRequest, opts ...grpc.CallOption) (*GetSchedulerNumResponse, error)
}

type resourceRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceRequestServiceClient(cc grpc.ClientConnInterface) ResourceRequestServiceClient {
	return &resourceRequestServiceClient{cc}
}

func (c *resourceRequestServiceClient) GetResourceAllocateInfo(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceAllocateInfo, error) {
	out := new(ResourceAllocateInfo)
	err := c.cc.Invoke(ctx, "/resource_allocator.ResourceRequestService/GetResourceAllocateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRequestServiceClient) CreateSchedulerPod(ctx context.Context, in *CreateSchedulerPodRequest, opts ...grpc.CallOption) (*CreateSchedulerPodResponse, error) {
	out := new(CreateSchedulerPodResponse)
	err := c.cc.Invoke(ctx, "/resource_allocator.ResourceRequestService/CreateSchedulerPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRequestServiceClient) CreateTaskPod(ctx context.Context, in *CreateTaskPodRequest, opts ...grpc.CallOption) (*CreateTaskPodResponse, error) {
	out := new(CreateTaskPodResponse)
	err := c.cc.Invoke(ctx, "/resource_allocator.ResourceRequestService/CreateTaskPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRequestServiceClient) DeleteWorkflowNamespace(ctx context.Context, in *DeleteWorkflowNamespaceRequest, opts ...grpc.CallOption) (*DeleteWorkflowNamespaceResponse, error) {
	out := new(DeleteWorkflowNamespaceResponse)
	err := c.cc.Invoke(ctx, "/resource_allocator.ResourceRequestService/DeleteWorkflowNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRequestServiceClient) UpdateSchedulerAliveStatus(ctx context.Context, in *UpdateSchedulerAliveStatusRequest, opts ...grpc.CallOption) (*UpdateSchedulerAliveStatusResponse, error) {
	out := new(UpdateSchedulerAliveStatusResponse)
	err := c.cc.Invoke(ctx, "/resource_allocator.ResourceRequestService/UpdateSchedulerAliveStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRequestServiceClient) GetAllocatableSchedulerNum(ctx context.Context, in *GetSchedulerNumRequest, opts ...grpc.CallOption) (*GetSchedulerNumResponse, error) {
	out := new(GetSchedulerNumResponse)
	err := c.cc.Invoke(ctx, "/resource_allocator.ResourceRequestService/GetAllocatableSchedulerNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceRequestServiceServer is the server API for ResourceRequestService service.
type ResourceRequestServiceServer interface {
	GetResourceAllocateInfo(context.Context, *ResourceRequest) (*ResourceAllocateInfo, error)
	CreateSchedulerPod(context.Context, *CreateSchedulerPodRequest) (*CreateSchedulerPodResponse, error)
	CreateTaskPod(context.Context, *CreateTaskPodRequest) (*CreateTaskPodResponse, error)
	DeleteWorkflowNamespace(context.Context, *DeleteWorkflowNamespaceRequest) (*DeleteWorkflowNamespaceResponse, error)
	UpdateSchedulerAliveStatus(context.Context, *UpdateSchedulerAliveStatusRequest) (*UpdateSchedulerAliveStatusResponse, error)
	GetAllocatableSchedulerNum(context.Context, *GetSchedulerNumRequest) (*GetSchedulerNumResponse, error)
}

// UnimplementedResourceRequestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedResourceRequestServiceServer struct {
}

func (*UnimplementedResourceRequestServiceServer) GetResourceAllocateInfo(context.Context, *ResourceRequest) (*ResourceAllocateInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceAllocateInfo not implemented")
}
func (*UnimplementedResourceRequestServiceServer) CreateSchedulerPod(context.Context, *CreateSchedulerPodRequest) (*CreateSchedulerPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedulerPod not implemented")
}
func (*UnimplementedResourceRequestServiceServer) CreateTaskPod(context.Context, *CreateTaskPodRequest) (*CreateTaskPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskPod not implemented")
}
func (*UnimplementedResourceRequestServiceServer) DeleteWorkflowNamespace(context.Context, *DeleteWorkflowNamespaceRequest) (*DeleteWorkflowNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflowNamespace not implemented")
}
func (*UnimplementedResourceRequestServiceServer) UpdateSchedulerAliveStatus(context.Context, *UpdateSchedulerAliveStatusRequest) (*UpdateSchedulerAliveStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchedulerAliveStatus not implemented")
}
func (*UnimplementedResourceRequestServiceServer) GetAllocatableSchedulerNum(context.Context, *GetSchedulerNumRequest) (*GetSchedulerNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocatableSchedulerNum not implemented")
}

func RegisterResourceRequestServiceServer(s *grpc.Server, srv ResourceRequestServiceServer) {
	s.RegisterService(&_ResourceRequestService_serviceDesc, srv)
}

func _ResourceRequestService_GetResourceAllocateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRequestServiceServer).GetResourceAllocateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource_allocator.ResourceRequestService/GetResourceAllocateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRequestServiceServer).GetResourceAllocateInfo(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRequestService_CreateSchedulerPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchedulerPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRequestServiceServer).CreateSchedulerPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource_allocator.ResourceRequestService/CreateSchedulerPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRequestServiceServer).CreateSchedulerPod(ctx, req.(*CreateSchedulerPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRequestService_CreateTaskPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRequestServiceServer).CreateTaskPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource_allocator.ResourceRequestService/CreateTaskPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRequestServiceServer).CreateTaskPod(ctx, req.(*CreateTaskPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRequestService_DeleteWorkflowNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRequestServiceServer).DeleteWorkflowNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource_allocator.ResourceRequestService/DeleteWorkflowNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRequestServiceServer).DeleteWorkflowNamespace(ctx, req.(*DeleteWorkflowNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRequestService_UpdateSchedulerAliveStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchedulerAliveStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRequestServiceServer).UpdateSchedulerAliveStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource_allocator.ResourceRequestService/UpdateSchedulerAliveStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRequestServiceServer).UpdateSchedulerAliveStatus(ctx, req.(*UpdateSchedulerAliveStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRequestService_GetAllocatableSchedulerNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulerNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRequestServiceServer).GetAllocatableSchedulerNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource_allocator.ResourceRequestService/GetAllocatableSchedulerNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRequestServiceServer).GetAllocatableSchedulerNum(ctx, req.(*GetSchedulerNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceRequestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resource_allocator.ResourceRequestService",
	HandlerType: (*ResourceRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResourceAllocateInfo",
			Handler:    _ResourceRequestService_GetResourceAllocateInfo_Handler,
		},
		{
			MethodName: "CreateSchedulerPod",
			Handler:    _ResourceRequestService_CreateSchedulerPod_Handler,
		},
		{
			MethodName: "CreateTaskPod",
			Handler:    _ResourceRequestService_CreateTaskPod_Handler,
		},
		{
			MethodName: "DeleteWorkflowNamespace",
			Handler:    _ResourceRequestService_DeleteWorkflowNamespace_Handler,
		},
		{
			MethodName: "UpdateSchedulerAliveStatus",
			Handler:    _ResourceRequestService_UpdateSchedulerAliveStatus_Handler,
		},
		{
			MethodName: "GetAllocatableSchedulerNum",
			Handler:    _ResourceRequestService_GetAllocatableSchedulerNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_allocator.proto",
}
