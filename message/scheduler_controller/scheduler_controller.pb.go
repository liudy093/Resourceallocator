// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: scheduler_controller.proto

package scheduler_controller

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type KeepAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 调度器id
	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// 调度器自测压力值（0~100，整数）
	Pressure uint32 `protobuf:"fixed32,2,opt,name=pressure,proto3" json:"pressure,omitempty"`
	// 调度器承载力（还可以承载/接收多少工作流，单位：个，整数）
	Capacity uint32 `protobuf:"fixed32,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// 保活序号（单调增，整数，从1开始）
	SerialNumber uint64 `protobuf:"varint,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// ipv4地址(ip:port)
	Ipv4 string `protobuf:"bytes,5,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	// 集群id（必须保证与集群内资源分配器使用相同的集群id）
	ClusterId string `protobuf:"bytes,6,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *KeepAliveRequest) Reset() {
	*x = KeepAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_controller_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveRequest) ProtoMessage() {}

func (x *KeepAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_controller_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveRequest.ProtoReflect.Descriptor instead.
func (*KeepAliveRequest) Descriptor() ([]byte, []int) {
	return file_scheduler_controller_proto_rawDescGZIP(), []int{0}
}

func (x *KeepAliveRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *KeepAliveRequest) GetPressure() uint32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *KeepAliveRequest) GetCapacity() uint32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *KeepAliveRequest) GetSerialNumber() uint64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *KeepAliveRequest) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *KeepAliveRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type KeepAliveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 下一次发送保活信号等待时间(从收到此应答到再次发送保活信号的等待时间，单位：秒)
	// 不会小于 1 秒
	WaitSecs int32 `protobuf:"varint,1,opt,name=wait_secs,json=waitSecs,proto3" json:"wait_secs,omitempty"`
}

func (x *KeepAliveReply) Reset() {
	*x = KeepAliveReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_controller_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAliveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveReply) ProtoMessage() {}

func (x *KeepAliveReply) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_controller_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveReply.ProtoReflect.Descriptor instead.
func (*KeepAliveReply) Descriptor() ([]byte, []int) {
	return file_scheduler_controller_proto_rawDescGZIP(), []int{1}
}

func (x *KeepAliveReply) GetWaitSecs() int32 {
	if x != nil {
		return x.WaitSecs
	}
	return 0
}

type InputWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Workflow [][]byte `protobuf:"bytes,1,rep,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *InputWorkflowRequest) Reset() {
	*x = InputWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_controller_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputWorkflowRequest) ProtoMessage() {}

func (x *InputWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_controller_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputWorkflowRequest.ProtoReflect.Descriptor instead.
func (*InputWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_scheduler_controller_proto_rawDescGZIP(), []int{2}
}

func (x *InputWorkflowRequest) GetWorkflow() [][]byte {
	if x != nil {
		return x.Workflow
	}
	return nil
}

type InputWorkflowReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accept uint32 `protobuf:"varint,1,opt,name=accept,proto3" json:"accept,omitempty"`
}

func (x *InputWorkflowReply) Reset() {
	*x = InputWorkflowReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_controller_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputWorkflowReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputWorkflowReply) ProtoMessage() {}

func (x *InputWorkflowReply) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_controller_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputWorkflowReply.ProtoReflect.Descriptor instead.
func (*InputWorkflowReply) Descriptor() ([]byte, []int) {
	return file_scheduler_controller_proto_rawDescGZIP(), []int{3}
}

func (x *InputWorkflowReply) GetAccept() uint32 {
	if x != nil {
		return x.Accept
	}
	return 0
}

type WorkflowIDListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkflowIDListRequest) Reset() {
	*x = WorkflowIDListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_controller_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowIDListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowIDListRequest) ProtoMessage() {}

func (x *WorkflowIDListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_controller_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowIDListRequest.ProtoReflect.Descriptor instead.
func (*WorkflowIDListRequest) Descriptor() ([]byte, []int) {
	return file_scheduler_controller_proto_rawDescGZIP(), []int{4}
}

type WorkflowIDListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *WorkflowIDListReply) Reset() {
	*x = WorkflowIDListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_controller_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowIDListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowIDListReply) ProtoMessage() {}

func (x *WorkflowIDListReply) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_controller_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowIDListReply.ProtoReflect.Descriptor instead.
func (*WorkflowIDListReply) Descriptor() ([]byte, []int) {
	return file_scheduler_controller_proto_rawDescGZIP(), []int{5}
}

func (x *WorkflowIDListReply) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetWorkflowByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *GetWorkflowByIdRequest) Reset() {
	*x = GetWorkflowByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_controller_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowByIdRequest) ProtoMessage() {}

func (x *GetWorkflowByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_controller_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowByIdRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowByIdRequest) Descriptor() ([]byte, []int) {
	return file_scheduler_controller_proto_rawDescGZIP(), []int{6}
}

func (x *GetWorkflowByIdRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

type GetWorkflowByIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowDag string `protobuf:"bytes,1,opt,name=workflow_dag,json=workflowDag,proto3" json:"workflow_dag,omitempty"`
}

func (x *GetWorkflowByIdReply) Reset() {
	*x = GetWorkflowByIdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_controller_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowByIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowByIdReply) ProtoMessage() {}

func (x *GetWorkflowByIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_controller_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowByIdReply.ProtoReflect.Descriptor instead.
func (*GetWorkflowByIdReply) Descriptor() ([]byte, []int) {
	return file_scheduler_controller_proto_rawDescGZIP(), []int{7}
}

func (x *GetWorkflowByIdReply) GetWorkflowDag() string {
	if x != nil {
		return x.WorkflowDag
	}
	return ""
}

type RegisterRARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群id
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ipv4地址(ip:port)
	Ipv4 string `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
}

func (x *RegisterRARequest) Reset() {
	*x = RegisterRARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_controller_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRARequest) ProtoMessage() {}

func (x *RegisterRARequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_controller_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRARequest.ProtoReflect.Descriptor instead.
func (*RegisterRARequest) Descriptor() ([]byte, []int) {
	return file_scheduler_controller_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterRARequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RegisterRARequest) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

type RegisterRAReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BootId string `protobuf:"bytes,1,opt,name=boot_id,json=bootId,proto3" json:"boot_id,omitempty"`
}

func (x *RegisterRAReply) Reset() {
	*x = RegisterRAReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_controller_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRAReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRAReply) ProtoMessage() {}

func (x *RegisterRAReply) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_controller_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRAReply.ProtoReflect.Descriptor instead.
func (*RegisterRAReply) Descriptor() ([]byte, []int) {
	return file_scheduler_controller_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterRAReply) GetBootId() string {
	if x != nil {
		return x.BootId
	}
	return ""
}

type WorkflowNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 工作流节点名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 依赖(确认)
	Dependencies []string `protobuf:"bytes,2,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	// image
	Template string `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
	// phase（状态）
	Phase string `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
	// status
	NodeInfo string `protobuf:"bytes,5,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
	// cpu(核数)
	Cpu uint32 `protobuf:"varint,6,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// 内存(Bytes)
	Mem uint64 `protobuf:"varint,7,opt,name=mem,proto3" json:"mem,omitempty"`
	// 环境变量
	Env map[string]string `protobuf:"bytes,8,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 输入向量
	InputVector []string `protobuf:"bytes,9,rep,name=input_vector,json=inputVector,proto3" json:"input_vector,omitempty"`
	// 输出向量
	OutputVector []string `protobuf:"bytes,10,rep,name=output_vector,json=outputVector,proto3" json:"output_vector,omitempty"`
}

func (x *WorkflowNode) Reset() {
	*x = WorkflowNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_controller_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowNode) ProtoMessage() {}

func (x *WorkflowNode) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_controller_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowNode.ProtoReflect.Descriptor instead.
func (*WorkflowNode) Descriptor() ([]byte, []int) {
	return file_scheduler_controller_proto_rawDescGZIP(), []int{10}
}

func (x *WorkflowNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowNode) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *WorkflowNode) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *WorkflowNode) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *WorkflowNode) GetNodeInfo() string {
	if x != nil {
		return x.NodeInfo
	}
	return ""
}

func (x *WorkflowNode) GetCpu() uint32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *WorkflowNode) GetMem() uint64 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *WorkflowNode) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *WorkflowNode) GetInputVector() []string {
	if x != nil {
		return x.InputVector
	}
	return nil
}

func (x *WorkflowNode) GetOutputVector() []string {
	if x != nil {
		return x.OutputVector
	}
	return nil
}

type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 工作流名称
	WorkflowName string `protobuf:"bytes,1,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty"`
	// 工作流类型
	Style string `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
	// 拓扑结构
	Topology []*WorkflowNode `protobuf:"bytes,3,rep,name=topology,proto3" json:"topology,omitempty"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_controller_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_controller_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_scheduler_controller_proto_rawDescGZIP(), []int{11}
}

func (x *Workflow) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *Workflow) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *Workflow) GetTopology() []*WorkflowNode {
	if x != nil {
		return x.Topology
	}
	return nil
}

var File_scheduler_controller_proto protoreflect.FileDescriptor

var file_scheduler_controller_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x0e, 0x4b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x77, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x73, 0x22, 0x32, 0x0a, 0x14, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x2c, 0x0a, 0x12,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44,
	0x61, 0x67, 0x22, 0x46, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x41,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x22, 0x2a, 0x0a, 0x0f, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x41, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x22, 0xf8, 0x02, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x70, 0x75,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d,
	0x65, 0x6d, 0x12, 0x3d, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e,
	0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e,
	0x76, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x32, 0xa0, 0x04, 0x0a, 0x13, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x59, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x26,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x65, 0x0a, 0x0d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2a, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x6d, 0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x6b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x6b, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x41, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x41, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scheduler_controller_proto_rawDescOnce sync.Once
	file_scheduler_controller_proto_rawDescData = file_scheduler_controller_proto_rawDesc
)

func file_scheduler_controller_proto_rawDescGZIP() []byte {
	file_scheduler_controller_proto_rawDescOnce.Do(func() {
		file_scheduler_controller_proto_rawDescData = protoimpl.X.CompressGZIP(file_scheduler_controller_proto_rawDescData)
	})
	return file_scheduler_controller_proto_rawDescData
}

var file_scheduler_controller_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_scheduler_controller_proto_goTypes = []interface{}{
	(*KeepAliveRequest)(nil),       // 0: scheduler_controller.KeepAliveRequest
	(*KeepAliveReply)(nil),         // 1: scheduler_controller.KeepAliveReply
	(*InputWorkflowRequest)(nil),   // 2: scheduler_controller.InputWorkflowRequest
	(*InputWorkflowReply)(nil),     // 3: scheduler_controller.InputWorkflowReply
	(*WorkflowIDListRequest)(nil),  // 4: scheduler_controller.WorkflowIDListRequest
	(*WorkflowIDListReply)(nil),    // 5: scheduler_controller.WorkflowIDListReply
	(*GetWorkflowByIdRequest)(nil), // 6: scheduler_controller.GetWorkflowByIdRequest
	(*GetWorkflowByIdReply)(nil),   // 7: scheduler_controller.GetWorkflowByIdReply
	(*RegisterRARequest)(nil),      // 8: scheduler_controller.RegisterRARequest
	(*RegisterRAReply)(nil),        // 9: scheduler_controller.RegisterRAReply
	(*WorkflowNode)(nil),           // 10: scheduler_controller.WorkflowNode
	(*Workflow)(nil),               // 11: scheduler_controller.Workflow
	nil,                            // 12: scheduler_controller.WorkflowNode.EnvEntry
}
var file_scheduler_controller_proto_depIdxs = []int32{
	12, // 0: scheduler_controller.WorkflowNode.env:type_name -> scheduler_controller.WorkflowNode.EnvEntry
	10, // 1: scheduler_controller.Workflow.topology:type_name -> scheduler_controller.WorkflowNode
	0,  // 2: scheduler_controller.SchedulerController.KeepAlive:input_type -> scheduler_controller.KeepAliveRequest
	2,  // 3: scheduler_controller.SchedulerController.InputWorkflow:input_type -> scheduler_controller.InputWorkflowRequest
	4,  // 4: scheduler_controller.SchedulerController.FetchWorkflowIDList:input_type -> scheduler_controller.WorkflowIDListRequest
	6,  // 5: scheduler_controller.SchedulerController.GetWorkflowByID:input_type -> scheduler_controller.GetWorkflowByIdRequest
	8,  // 6: scheduler_controller.SchedulerController.RegisterResourceAllocator:input_type -> scheduler_controller.RegisterRARequest
	1,  // 7: scheduler_controller.SchedulerController.KeepAlive:output_type -> scheduler_controller.KeepAliveReply
	3,  // 8: scheduler_controller.SchedulerController.InputWorkflow:output_type -> scheduler_controller.InputWorkflowReply
	5,  // 9: scheduler_controller.SchedulerController.FetchWorkflowIDList:output_type -> scheduler_controller.WorkflowIDListReply
	7,  // 10: scheduler_controller.SchedulerController.GetWorkflowByID:output_type -> scheduler_controller.GetWorkflowByIdReply
	9,  // 11: scheduler_controller.SchedulerController.RegisterResourceAllocator:output_type -> scheduler_controller.RegisterRAReply
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_scheduler_controller_proto_init() }
func file_scheduler_controller_proto_init() {
	if File_scheduler_controller_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scheduler_controller_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_controller_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAliveReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_controller_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_controller_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputWorkflowReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_controller_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowIDListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_controller_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowIDListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_controller_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_controller_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowByIdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_controller_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_controller_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRAReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_controller_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_controller_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scheduler_controller_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scheduler_controller_proto_goTypes,
		DependencyIndexes: file_scheduler_controller_proto_depIdxs,
		MessageInfos:      file_scheduler_controller_proto_msgTypes,
	}.Build()
	File_scheduler_controller_proto = out.File
	file_scheduler_controller_proto_rawDesc = nil
	file_scheduler_controller_proto_goTypes = nil
	file_scheduler_controller_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchedulerControllerClient is the client API for SchedulerController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerControllerClient interface {
	// 调度器内保活器向调度器控制器发送保活信号
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveReply, error)
	// 前端输入工作流
	InputWorkflow(ctx context.Context, in *InputWorkflowRequest, opts ...grpc.CallOption) (*InputWorkflowReply, error)
	// 导出工作流ID
	FetchWorkflowIDList(ctx context.Context, in *WorkflowIDListRequest, opts ...grpc.CallOption) (*WorkflowIDListReply, error)
	// 选择某一个工作流查看DAG
	GetWorkflowByID(ctx context.Context, in *GetWorkflowByIdRequest, opts ...grpc.CallOption) (*GetWorkflowByIdReply, error)
	// 注册资源分配器
	RegisterResourceAllocator(ctx context.Context, in *RegisterRARequest, opts ...grpc.CallOption) (*RegisterRAReply, error)
}

type schedulerControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerControllerClient(cc grpc.ClientConnInterface) SchedulerControllerClient {
	return &schedulerControllerClient{cc}
}

func (c *schedulerControllerClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveReply, error) {
	out := new(KeepAliveReply)
	err := c.cc.Invoke(ctx, "/scheduler_controller.SchedulerController/KeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerControllerClient) InputWorkflow(ctx context.Context, in *InputWorkflowRequest, opts ...grpc.CallOption) (*InputWorkflowReply, error) {
	out := new(InputWorkflowReply)
	err := c.cc.Invoke(ctx, "/scheduler_controller.SchedulerController/InputWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerControllerClient) FetchWorkflowIDList(ctx context.Context, in *WorkflowIDListRequest, opts ...grpc.CallOption) (*WorkflowIDListReply, error) {
	out := new(WorkflowIDListReply)
	err := c.cc.Invoke(ctx, "/scheduler_controller.SchedulerController/FetchWorkflowIDList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerControllerClient) GetWorkflowByID(ctx context.Context, in *GetWorkflowByIdRequest, opts ...grpc.CallOption) (*GetWorkflowByIdReply, error) {
	out := new(GetWorkflowByIdReply)
	err := c.cc.Invoke(ctx, "/scheduler_controller.SchedulerController/GetWorkflowByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerControllerClient) RegisterResourceAllocator(ctx context.Context, in *RegisterRARequest, opts ...grpc.CallOption) (*RegisterRAReply, error) {
	out := new(RegisterRAReply)
	err := c.cc.Invoke(ctx, "/scheduler_controller.SchedulerController/RegisterResourceAllocator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerControllerServer is the server API for SchedulerController service.
type SchedulerControllerServer interface {
	// 调度器内保活器向调度器控制器发送保活信号
	KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveReply, error)
	// 前端输入工作流
	InputWorkflow(context.Context, *InputWorkflowRequest) (*InputWorkflowReply, error)
	// 导出工作流ID
	FetchWorkflowIDList(context.Context, *WorkflowIDListRequest) (*WorkflowIDListReply, error)
	// 选择某一个工作流查看DAG
	GetWorkflowByID(context.Context, *GetWorkflowByIdRequest) (*GetWorkflowByIdReply, error)
	// 注册资源分配器
	RegisterResourceAllocator(context.Context, *RegisterRARequest) (*RegisterRAReply, error)
}

// UnimplementedSchedulerControllerServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulerControllerServer struct {
}

func (*UnimplementedSchedulerControllerServer) KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (*UnimplementedSchedulerControllerServer) InputWorkflow(context.Context, *InputWorkflowRequest) (*InputWorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputWorkflow not implemented")
}
func (*UnimplementedSchedulerControllerServer) FetchWorkflowIDList(context.Context, *WorkflowIDListRequest) (*WorkflowIDListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchWorkflowIDList not implemented")
}
func (*UnimplementedSchedulerControllerServer) GetWorkflowByID(context.Context, *GetWorkflowByIdRequest) (*GetWorkflowByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowByID not implemented")
}
func (*UnimplementedSchedulerControllerServer) RegisterResourceAllocator(context.Context, *RegisterRARequest) (*RegisterRAReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterResourceAllocator not implemented")
}

func RegisterSchedulerControllerServer(s *grpc.Server, srv SchedulerControllerServer) {
	s.RegisterService(&_SchedulerController_serviceDesc, srv)
}

func _SchedulerController_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerControllerServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler_controller.SchedulerController/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerControllerServer).KeepAlive(ctx, req.(*KeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerController_InputWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerControllerServer).InputWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler_controller.SchedulerController/InputWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerControllerServer).InputWorkflow(ctx, req.(*InputWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerController_FetchWorkflowIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowIDListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerControllerServer).FetchWorkflowIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler_controller.SchedulerController/FetchWorkflowIDList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerControllerServer).FetchWorkflowIDList(ctx, req.(*WorkflowIDListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerController_GetWorkflowByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerControllerServer).GetWorkflowByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler_controller.SchedulerController/GetWorkflowByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerControllerServer).GetWorkflowByID(ctx, req.(*GetWorkflowByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerController_RegisterResourceAllocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerControllerServer).RegisterResourceAllocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler_controller.SchedulerController/RegisterResourceAllocator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerControllerServer).RegisterResourceAllocator(ctx, req.(*RegisterRARequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchedulerController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler_controller.SchedulerController",
	HandlerType: (*SchedulerControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeepAlive",
			Handler:    _SchedulerController_KeepAlive_Handler,
		},
		{
			MethodName: "InputWorkflow",
			Handler:    _SchedulerController_InputWorkflow_Handler,
		},
		{
			MethodName: "FetchWorkflowIDList",
			Handler:    _SchedulerController_FetchWorkflowIDList_Handler,
		},
		{
			MethodName: "GetWorkflowByID",
			Handler:    _SchedulerController_GetWorkflowByID_Handler,
		},
		{
			MethodName: "RegisterResourceAllocator",
			Handler:    _SchedulerController_RegisterResourceAllocator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler_controller.proto",
}
